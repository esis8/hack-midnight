
pragma language_version 0.17.0;

import CompactStandardLibrary;

export enum STATE { vacant, occupied }

export ledger state: STATE;
export ledger message: Maybe<Opaque<"string">>;
export ledger instance: Counter;
export ledger poster: Bytes<32>;

export ledger title: Maybe<Opaque<"string">>;
export ledger titlePoster: Bytes<32>;

constructor() {
    state = STATE.vacant;
    message = none<Opaque<"string">>();
    title = none<Opaque<"string">>();
    titlePoster = pad(32, "");
    instance.increment(1);
}

witness localSecretKey(): Bytes<32>;
witness countBoolean(value: Boolean): Uint<64>;
witness getVotes(): [Uint<64>, Uint<64>];

export circuit post(newMessage: Opaque<"string">): [] {
    assert(state == STATE.vacant, "Attempted to post to an occupied board");
    poster = disclose(publicKey(localSecretKey(), instance as Field as Bytes<32>));
    message = some<Opaque<"string">>(disclose(newMessage));
    state = STATE.occupied;
}

export circuit takeDown(): Opaque<"string"> {
    assert(state == STATE.occupied, "Attempted to take down post from an empty board");
    assert(poster == publicKey(localSecretKey(), instance as Field as Bytes<32>),
        "Attempted to take down post, but not the current poster");
    const formerMsg = message.value;
    state = STATE.vacant;
    instance.increment(1);
    message = none<Opaque<"string">>();
    return formerMsg;
}

// Reusamos esta función; el 2° parámetro actúa como "salt".
export circuit publicKey(sk: Bytes<32>, salt: Bytes<32>): Bytes<32> {
    return persistentHash<Vector<3, Bytes<32>>>([pad(32, "bboard:pk:"), salt, sk]);
}

export circuit debugInfo(): [Uint<64>, Uint<64>] {
    return disclose(getVotes());
}

// Circuito para votar según el booleano
export circuit vote(value: Boolean): [] {
  countBoolean(value);
}

export circuit setTitleOnce(newTitle: Opaque<"string">): [] {
    assert(!title.is_some, "Title already set");
    titlePoster = disclose(publicKey(localSecretKey(), instance as Field as Bytes<32>));
    title = some<Opaque<"string">>(disclose(newTitle));
}

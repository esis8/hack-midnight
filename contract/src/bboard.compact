
pragma language_version 0.17.0;

import CompactStandardLibrary;

export ledger message: Maybe<Opaque<"string">>;
export ledger trueVotes: Counter;
export ledger falseVotes: Counter;
export ledger poster: Bytes<32>;
export ledger title: Maybe<Opaque<"string">>;

constructor() {
    message = none<Opaque<"string">>();
    title = none<Opaque<"string">>();
    poster = pad(32, "");
    trueVotes.increment(0);
    falseVotes.increment(0);
}

witness localSecretKey(): Bytes<32>;

export circuit publicKey(sk: Bytes<32>, salt: Bytes<32>): Bytes<32> {
    return persistentHash<Vector<3, Bytes<32>>>([pad(32, "bboard:pk:"), salt, sk]);
}

// Circuito para votar seg√∫n el booleano
export circuit vote(choice: Boolean): [] {
  assert(title.is_some && message.is_some, "Not yet published");

  const revealed: Boolean = disclose(choice);
  if (revealed) {
    trueVotes.increment(1);
  } else {
    falseVotes.increment(1);
  }
}

export circuit setPublishOne(newTitle: Opaque<"string">, newMessage: Opaque<"string">): [] {
    assert(!title.is_some && !message.is_some, "Already published");
    const pub = disclose(publicKey(localSecretKey(), pad(32, "bboard:publish")));
    poster = pub;
    title = some<Opaque<"string">>(disclose(newTitle));
    message = some<Opaque<"string">>(disclose(newMessage));
}

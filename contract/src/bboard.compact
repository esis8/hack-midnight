
pragma language_version 0.17.0;

import CompactStandardLibrary;

export ledger message: Maybe<Opaque<"string">>;
export ledger instance: Counter;
export ledger poster: Bytes<32>;
export ledger title: Maybe<Opaque<"string">>;

constructor() {
    message = none<Opaque<"string">>();
    title = none<Opaque<"string">>();
    poster = pad(32, "");
    instance.increment(1);
}

witness localSecretKey(): Bytes<32>;
witness countBoolean(value: Boolean): Uint<64>;
witness getVotes(): [Uint<64>, Uint<64>];


// Reusamos esta función; el 2° parámetro actúa como "salt".
export circuit publicKey(sk: Bytes<32>, salt: Bytes<32>): Bytes<32> {
    return persistentHash<Vector<3, Bytes<32>>>([pad(32, "bboard:pk:"), salt, sk]);
}

export circuit debugInfo(): [Uint<64>, Uint<64>] {
    return disclose(getVotes());
}

// Circuito para votar según el booleano
export circuit vote(value: Boolean): [] {
  countBoolean(value);
}

export circuit setPublishOne(newTitle: Opaque<"string">, newMessage: Opaque<"string">): [] {
    assert(!title.is_some && !message.is_some, "Already published");
    const pub = disclose(publicKey(localSecretKey(), pad(32, "bboard:publish")));
    poster = pub;
    title = some<Opaque<"string">>(disclose(newTitle));
    message = some<Opaque<"string">>(disclose(newMessage));
}

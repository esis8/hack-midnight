
pragma language_version 0.17.0;

import "../compact-contracts/node_modules/@openzeppelin-compact/contracts/src/access/Ownable"
  prefix Ownable_;
import CompactStandardLibrary;

export ledger message: Maybe<Opaque<"string">>;
// export ledger poster: Either<ZswapCoinPublicKey, ContractAddress>;
export ledger poster: Bytes<32>;
export ledger title: Maybe<Opaque<"string">>;

constructor(
    // initialOwner: Either<ZswapCoinPublicKey, ContractAddress>
) {
    // Ownable_initialize(initialOwner);
    message = none<Opaque<"string">>();
    title = none<Opaque<"string">>();
    //  poster = disclose(initialOwner);
    poster = pad(32, "");
}

witness countBoolean(value: Boolean): Uint<64>;

// Circuito para votar seg√∫n el booleano
export circuit vote(value: Boolean): [] {
  countBoolean(value);
}

export circuit owner(): Either<ZswapCoinPublicKey, ContractAddress> {
  return Ownable_owner();
}

export circuit setPublishOne(newTitle: Opaque<"string">, newMessage: Opaque<"string">): [] {
    assert(!title.is_some && !message.is_some, "Already published");
    // Ownable_assertOnlyOwner();

    title = some<Opaque<"string">>(disclose(newTitle));
    message = some<Opaque<"string">>(disclose(newMessage));
}
